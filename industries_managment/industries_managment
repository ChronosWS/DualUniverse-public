{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"\n--[[\n\tA simple script to control your industries.\n\tInstallation steps:\n\t   - link your industries to the programing board \n\t   - dont rename the slots (if you do: edit the g_slots table to make it work)\n\t\n\tOptionnal automatic batch and maintain quantity:\n\t\t- link the core\n\t\t- rename each industry by the wanted quantity\n\t\t  /!\\ minimum 5 characters, ex: type \"00050\" for a value of 50\n\n\tA question? contact Ater Omen\n\t07 Sept 2020\n]]\n\n--------------------------------------\n-- start\n--------------------------------------\n-- any industry\n\ncore, g_slots = processSlots({slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10,})\ng_slotsNames = {}\nif core then g_slotsNames = getSlotsNames(core, g_slots) end\n\n-- svg settings\ng_displayKeys = true -- for clarity\ng_fontsize = 25\ng_pad = 5\ng_X = 100\ng_Y = 250\ng_height = (g_fontsize + g_pad) * 10 + g_pad * 4\ng_width = 1400\ng_commandsX = g_width / 5 * 3\ng_rectColor = \"#121326\"\ng_textColor = \"#b9babb\"\n\nlocal main_arr = {\n            [1] = \"Commands (default shortcuts) :\",\n            [2] = \"- Option 1 : Finish and Stop\",\n            [3] = \"- Option 2 : Stop\",\n            [4] = \"- Option 3 : Run âˆž\",\n            [5] = \"- Option 4 : Make batch\",\n            [6] = \"- Option 5 : Maintain\",\n            [7] = \"- Ctrl + Backspace : Exit\"\n        }\nif core then\n    main_arr[9] = main_arr[7]\n    main_arr[7] = \"- Option 6 : Maintain (automatic)\"\n    main_arr[8] = \"- Option 7 : Make Batch (automatic)\"\nend\nlocal commands_main = toSVG(main_arr, 0, 0)\nlocal commands_maintain = toSVG({\n            [1] = \"Commands (default shortcuts) :\",\n            [2] = \"- Option X : digit X\",\n            [3] = \"- Stop engine (MMB) : digit 0\",\n            [4] = \"- SpeedUp (R) : Remove last digit\",\n            [5] = \"- Gears (G) : Go, Confirm\",\n            [6] = \"- Ctrl + Backspace : Exit\"\n        }, 0, 0)\nsvg = {}\nfunction svg.dump()\n    return svg.header .. svg.base .. svg.body .. svg.footer\nend\nsvg.header = [[\n<style>\n.svg {\n    position:absolute;\n    left: 0;\n    top: 0;\n    height: 100vh;\n    width: 100vw;\n}\n</style>\n<svg class=\"svg\">\n]]\nsvg.base = string.format([[\n<defs>\n\t<g id=\"console\">\n\t\t<rect x=\"0\" y=\"0\" width=\"%d\" height=\"%d\" fill=\"%s\" fill-opacity=\"0.85\" />\n\t\t<line x1=\"%d\" y1=\"%d\" x2=\"%d\" y2=\"%d\" stroke=\"%s\" stroke-width=\"2\" />\n\t</g>\n\t<g id=\"commands_main\">\n    \t%s\n\t</g>\n\t<g id=\"commands_maintain\">\n    \t%s\n\t</g>\n</defs>\n]], g_width, g_height, g_rectColor,\n\tg_commandsX - 10, 10, g_commandsX - 10, g_height - 10, g_textColor,\n\tcommands_main,\n\tcommands_maintain)\n\nsvg.footer = [[</svg>]]\nsvg.body = [[]]\n-- svg settings end\n\ng_numberSelection = false\ng_option = 0\ng_number = nil\ng_maxNumber = 999999\n\nsystem.showScreen(1)\nunit.setTimer(\"hud\", 1/5)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"svg.body = \"\"\n\nif not g_numberSelection then\n    svg.body = svg.body .. displayStatus(g_slots, g_X, g_Y)\nelse\n    svg.body = svg.body .. displayNumberSelection(g_X, g_Y)\nend\n\nsystem.setScreen(svg.dump())","filter":{"args":[{"value":"hud"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"if g_numberSelection then\n\taddDigit(5)\nelse\n    g_numberSelection = true\n    g_option = 5\nend","filter":{"args":[{"value":"option5"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"2"},{"code":"if g_numberSelection then\n    addDigit(4)\nelse\n    g_numberSelection = true\n    g_option = 4\nend\n","filter":{"args":[{"value":"option4"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"3"},{"code":"if g_numberSelection then\n    addDigit(3)\nelse\n    for i, machine in ipairs(g_slots) do\n        machine.start()\n    end\nend","filter":{"args":[{"value":"option3"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"4"},{"code":"if g_numberSelection == true then\n    addDigit(2)\nelse\n    for i, machine in ipairs(g_slots) do\n        machine.hardStop()\n    end\nend","filter":{"args":[{"value":"option2"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"5"},{"code":"if g_numberSelection then\n    addDigit(1)\nelse\n    for i, machine in ipairs(g_slots) do\n    \tmachine.softStop()\n    end\nend","filter":{"args":[{"value":"option1"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"6"},{"code":"if g_numberSelection then\n    addDigit(6)\nelse\n    for i, machine in ipairs(g_slots) do\n        machine.startAndMaintain(g_slotsNames[i])\n    end\nend","filter":{"args":[{"value":"option6"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"7"},{"code":"if g_numberSelection then\n    addDigit(7)\nelse\n    for i, machine in ipairs(g_slots) do\n        machine.batchStart(g_slotsNames[i])\n    end\nend","filter":{"args":[{"value":"option7"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"8"},{"code":"if g_numberSelection then\n    addDigit(8)\nend","filter":{"args":[{"value":"option8"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"9"},{"code":"if g_numberSelection then\n    addDigit(9)\nend","filter":{"args":[{"value":"option9"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"10"},{"code":"if g_numberSelection then\n    addDigit(0)\nend","filter":{"args":[{"value":"stopengines"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"11"},{"code":"if g_numberSelection then\n    removeDigit()\nend","filter":{"args":[{"value":"speedup"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"12"},{"code":"if g_numberSelection then\n    for i, machine in ipairs(g_slots) do\n        if g_option == 4 then\n        \tmachine.batchStart(g_number)\n        elseif g_option == 5 then\n        \tmachine.startAndMaintain(g_number)\n        end\n    end\n    \n    g_number = nil\n    g_numberSelection = false\n    g_option = 0\nend","filter":{"args":[{"value":"gear"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"13"},{"code":"function processSlots(slots)\n    local machines = {}\n    local j = 1\n    local core = nil\n    for i, s in ipairs(slots) do\n        local class = s.getElementClass()\n        if class == \"CoreUnitStatic\" then\n            core = s\n        elseif class == \"IndustryUnit\" then\n            machines[j] = s\n            j = j + 1\n        end\n    end\n    return core, machines\nend\nfunction getSlotsNames(core, slots)\n    local names = {}\n    for i, s in ipairs(slots) do\n        names[i] = core.getElementNameById(s.getId())\n    end\n    return names\nend\nfunction addDigit(d)\n    g_number = (g_number and (g_number * 10) or 0) + d\n    if g_number > g_maxNumber then\n        g_number = g_maxNumber\n    end\nend\nfunction removeDigit()\n    g_number = (g_number and math.floor(g_number / 10) or 0)\nend\nfunction displayStatus(slots, x, y)\n    local svg = string.format([[\n    <use x=\"%d\" y=\"%d\" xlink:href=\"#console\" />\n    <use x=\"%d\" y=\"%d\" xlink:href=\"#commands_main\" />\n    ]], x - 10, y - g_fontsize - g_pad,\n    \tx + g_commandsX, y)\n    local arr = {}\n    for i, machine in ipairs(slots) do\n        --[[\n        STOPPED\n        RUNNING\n        PENDING\n        JAMMED_MISSING_INGREDIENT\n        JAMMED_OUTPUT_FULL\n        JAMMED_NO_OUTPUT_CONTAINER\n\t   ]]\n        arr[i] = (g_slotsNames[i] or \"IndustryUnit\") .. \"<\" .. (tonumber(g_slotsNames[i]) or 0) .. \">\" ..\" : \" .. machine.getStatus()\n    end\n    svg = svg .. toSVG(arr, x, y, g_displayKeys)\n    return svg\nend\nfunction displayNumberSelection(x, y)\n    local pad = 20\n    local height = g_pad * 4 + pad + g_fontsize * 2 + 350\n    local bottom = y + g_fontsize + g_pad + pad\n    local svg = string.format([[\n    <use x=\"%d\" y=\"%d\" xlink:href=\"#console\" />\n    <use x=\"%d\" y=\"%d\" xlink:href=\"#commands_maintain\" />\n]], x - 10, y - g_fontsize - g_pad,\n\tx + g_commandsX, y)\n    \n    svg = svg .. string.format([[\n    <text x=\"%d\" y=\"%d\" font-size=\"%dpx\" fill=\"%s\" stroke=\"black\" stroke-width=\"2\">%s</text>\n    <text x=\"%d\" y=\"%d\" font-size=\"%dpx\" fill=\"%s\" stroke=\"black\" stroke-width=\"2\">%d</text>\n    ]], x, y, g_fontsize, g_textColor, \"Type maintain amount and press 'G' to confirm:\",\n     x + 50, bottom, g_fontsize, g_textColor, g_number or \"0\")\n    \n    return svg\nend\n\nfunction toSVG(arr, x, ystart, displayKey)\n    local svg = \"\"\n    ystart = ystart or 20\n    x = x or 25\n    displayKey = displayKey or false\n    \n    for i, v in ipairs(arr) do\n        svg = svg .. string.format([[\n            <text x=\"%d\" y=\"%d\"\n            \tfont-size=\"%dpx\" fill=\"%s\" stroke=\"black\" stroke-width=\"2\">\n            \t%s%s\n            </text>\n            ]], x, (ystart + (i - 1)*(g_fontsize+g_pad)),\n            \tg_fontsize, g_textColor,\n            \tdisplayKey and (i..\" : \") or \"\", v..\"\")\n    end\n    return svg\nend\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"14"}],"methods":[],"events":[]}